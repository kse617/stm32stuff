
stm32stuff.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002740  08002740  00012740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002778  08002778  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002778  08002778  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002778  08002778  00012778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800277c  0800277c  0001277c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000084da  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011cc  00000000  00000000  00028516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000608  00000000  00000000  000296e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005a0  00000000  00000000  00029cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001969f  00000000  00000000  0002a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008029  00000000  00000000  0004392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000969be  00000000  00000000  0004b958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e2316  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001778  00000000  00000000  000e2368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002728 	.word	0x08002728

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002728 	.word	0x08002728

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f976 	bl	80004bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f87a 	bl	80002cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f848 	bl	800026c <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOB, 3);
 80001dc:	2103      	movs	r1, #3
 80001de:	4804      	ldr	r0, [pc, #16]	; (80001f0 <main+0x28>)
 80001e0:	f000 fc4e 	bl	8000a80 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80001e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e8:	f000 f9ce 	bl	8000588 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOB, 3);
 80001ec:	e7f6      	b.n	80001dc <main+0x14>
 80001ee:	bf00      	nop
 80001f0:	48000400 	.word	0x48000400

080001f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	; 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	; 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f002 fa88 	bl	8002718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000222:	2300      	movs	r3, #0
 8000224:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	4618      	mov	r0, r3
 800022c:	f000 fc42 	bl	8000ab4 <HAL_RCC_OscConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000236:	f000 f86d 	bl	8000314 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023a:	230f      	movs	r3, #15
 800023c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fc6c 	bl	8001b30 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025e:	f000 f859 	bl	8000314 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	; 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000272:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <MX_USART2_UART_Init+0x5c>)
 8000274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000276:	4b13      	ldr	r3, [pc, #76]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000278:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800027c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000284:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000292:	220c      	movs	r2, #12
 8000294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000296:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 8000298:	2200      	movs	r2, #0
 800029a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029c:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 800029e:	2200      	movs	r2, #0
 80002a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_USART2_UART_Init+0x58>)
 80002b0:	f001 fe74 	bl	8001f9c <HAL_UART_Init>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002ba:	f000 f82b 	bl	8000314 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	20000028 	.word	0x20000028
 80002c8:	40004400 	.word	0x40004400

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d4:	695b      	ldr	r3, [r3, #20]
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <MX_GPIO_Init+0x44>)
 80002d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002dc:	6153      	str	r3, [r2, #20]
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_GPIO_Init+0x44>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_GPIO_Init+0x44>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002f4:	6153      	str	r3, [r2, #20]
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_GPIO_Init+0x44>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002fe:	603b      	str	r3, [r7, #0]
 8000300:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40021000 	.word	0x40021000

08000314 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000318:	b672      	cpsid	i
}
 800031a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800031c:	e7fe      	b.n	800031c <Error_Handler+0x8>
	...

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x44>)
 8000328:	699b      	ldr	r3, [r3, #24]
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x44>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6193      	str	r3, [r2, #24]
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x44>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_MspInit+0x44>)
 8000340:	69db      	ldr	r3, [r3, #28]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <HAL_MspInit+0x44>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000348:	61d3      	str	r3, [r2, #28]
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_MspInit+0x44>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	2200      	movs	r2, #0
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	605a      	str	r2, [r3, #4]
 800037a:	609a      	str	r2, [r3, #8]
 800037c:	60da      	str	r2, [r3, #12]
 800037e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a18      	ldr	r2, [pc, #96]	; (80003e8 <HAL_UART_MspInit+0x80>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d129      	bne.n	80003de <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <HAL_UART_MspInit+0x84>)
 800038c:	69db      	ldr	r3, [r3, #28]
 800038e:	4a17      	ldr	r2, [pc, #92]	; (80003ec <HAL_UART_MspInit+0x84>)
 8000390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000394:	61d3      	str	r3, [r2, #28]
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_UART_MspInit+0x84>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800039e:	613b      	str	r3, [r7, #16]
 80003a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <HAL_UART_MspInit+0x84>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a11      	ldr	r2, [pc, #68]	; (80003ec <HAL_UART_MspInit+0x84>)
 80003a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <HAL_UART_MspInit+0x84>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80003ba:	f248 0304 	movw	r3, #32772	; 0x8004
 80003be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003c0:	2302      	movs	r3, #2
 80003c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003c8:	2303      	movs	r3, #3
 80003ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003cc:	2307      	movs	r3, #7
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d0:	f107 0314 	add.w	r3, r7, #20
 80003d4:	4619      	mov	r1, r3
 80003d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003da:	f000 f9df 	bl	800079c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003de:	bf00      	nop
 80003e0:	3728      	adds	r7, #40	; 0x28
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40004400 	.word	0x40004400
 80003ec:	40021000 	.word	0x40021000

080003f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f4:	e7fe      	b.n	80003f4 <NMI_Handler+0x4>

080003f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f6:	b480      	push	{r7}
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fa:	e7fe      	b.n	80003fa <HardFault_Handler+0x4>

080003fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <MemManage_Handler+0x4>

08000402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000402:	b480      	push	{r7}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	e7fe      	b.n	800040c <UsageFault_Handler+0x4>

0800040e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040e:	b480      	push	{r7}
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr

0800041c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043c:	f000 f884 	bl	8000548 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	bd80      	pop	{r7, pc}

08000444 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	; (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004a0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800046c:	f7ff ffea 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	; (80004a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	; (80004a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <LoopForever+0xe>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	; (80004b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	; (80004b4 <LoopForever+0x16>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000496:	f002 f91b 	bl	80026d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800049a:	f7ff fe95 	bl	80001c8 <main>

0800049e <LoopForever>:

LoopForever:
    b LoopForever
 800049e:	e7fe      	b.n	800049e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004a0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004ac:	08002780 	.word	0x08002780
  ldr r2, =_sbss
 80004b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004b4:	200000b4 	.word	0x200000b4

080004b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC1_2_IRQHandler>
	...

080004bc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <HAL_Init+0x28>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_Init+0x28>)
 80004c6:	f043 0310 	orr.w	r3, r3, #16
 80004ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f000 f931 	bl	8000734 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 f808 	bl	80004e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004d8:	f7ff ff22 	bl	8000320 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40022000 	.word	0x40022000

080004e8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <HAL_InitTick+0x54>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_InitTick+0x58>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f93b 	bl	8000782 <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	e00e      	b.n	8000534 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b0f      	cmp	r3, #15
 800051a:	d80a      	bhi.n	8000532 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800051c:	2200      	movs	r2, #0
 800051e:	6879      	ldr	r1, [r7, #4]
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f000 f911 	bl	800074a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000528:	4a06      	ldr	r2, [pc, #24]	; (8000544 <HAL_InitTick+0x5c>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800052e:	2300      	movs	r3, #0
 8000530:	e000      	b.n	8000534 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000532:	2301      	movs	r3, #1
}
 8000534:	4618      	mov	r0, r3
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000000 	.word	0x20000000
 8000540:	20000008 	.word	0x20000008
 8000544:	20000004 	.word	0x20000004

08000548 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_IncTick+0x20>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_IncTick+0x24>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4413      	add	r3, r2
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_IncTick+0x24>)
 800055a:	6013      	str	r3, [r2, #0]
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000008 	.word	0x20000008
 800056c:	200000b0 	.word	0x200000b0

08000570 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return uwTick;  
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <HAL_GetTick+0x14>)
 8000576:	681b      	ldr	r3, [r3, #0]
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	200000b0 	.word	0x200000b0

08000588 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000590:	f7ff ffee 	bl	8000570 <HAL_GetTick>
 8000594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005a0:	d005      	beq.n	80005ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_Delay+0x44>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005ae:	bf00      	nop
 80005b0:	f7ff ffde 	bl	8000570 <HAL_GetTick>
 80005b4:	4602      	mov	r2, r0
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d8f7      	bhi.n	80005b0 <HAL_Delay+0x28>
  {
  }
}
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000008 	.word	0x20000008

080005d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f003 0307 	and.w	r3, r3, #7
 80005de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005ec:	4013      	ands	r3, r2
 80005ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000602:	4a04      	ldr	r2, [pc, #16]	; (8000614 <__NVIC_SetPriorityGrouping+0x44>)
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60d3      	str	r3, [r2, #12]
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__NVIC_GetPriorityGrouping+0x18>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	0a1b      	lsrs	r3, r3, #8
 8000622:	f003 0307 	and.w	r3, r3, #7
}
 8000626:	4618      	mov	r0, r3
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	e000ed00 	.word	0xe000ed00

08000634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	db0a      	blt.n	800065e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	b2da      	uxtb	r2, r3
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <__NVIC_SetPriority+0x4c>)
 800064e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000652:	0112      	lsls	r2, r2, #4
 8000654:	b2d2      	uxtb	r2, r2
 8000656:	440b      	add	r3, r1
 8000658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800065c:	e00a      	b.n	8000674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4908      	ldr	r1, [pc, #32]	; (8000684 <__NVIC_SetPriority+0x50>)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	f003 030f 	and.w	r3, r3, #15
 800066a:	3b04      	subs	r3, #4
 800066c:	0112      	lsls	r2, r2, #4
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	440b      	add	r3, r1
 8000672:	761a      	strb	r2, [r3, #24]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000e100 	.word	0xe000e100
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f003 0307 	and.w	r3, r3, #7
 800069a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	69fb      	ldr	r3, [r7, #28]
 800069e:	f1c3 0307 	rsb	r3, r3, #7
 80006a2:	2b04      	cmp	r3, #4
 80006a4:	bf28      	it	cs
 80006a6:	2304      	movcs	r3, #4
 80006a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	3304      	adds	r3, #4
 80006ae:	2b06      	cmp	r3, #6
 80006b0:	d902      	bls.n	80006b8 <NVIC_EncodePriority+0x30>
 80006b2:	69fb      	ldr	r3, [r7, #28]
 80006b4:	3b03      	subs	r3, #3
 80006b6:	e000      	b.n	80006ba <NVIC_EncodePriority+0x32>
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006bc:	f04f 32ff 	mov.w	r2, #4294967295
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43da      	mvns	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	401a      	ands	r2, r3
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006d0:	f04f 31ff 	mov.w	r1, #4294967295
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	fa01 f303 	lsl.w	r3, r1, r3
 80006da:	43d9      	mvns	r1, r3
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	4313      	orrs	r3, r2
         );
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3724      	adds	r7, #36	; 0x24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000700:	d301      	bcc.n	8000706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000702:	2301      	movs	r3, #1
 8000704:	e00f      	b.n	8000726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000706:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <SysTick_Config+0x40>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3b01      	subs	r3, #1
 800070c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800070e:	210f      	movs	r1, #15
 8000710:	f04f 30ff 	mov.w	r0, #4294967295
 8000714:	f7ff ff8e 	bl	8000634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SysTick_Config+0x40>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800071e:	4b04      	ldr	r3, [pc, #16]	; (8000730 <SysTick_Config+0x40>)
 8000720:	2207      	movs	r2, #7
 8000722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000724:	2300      	movs	r3, #0
}
 8000726:	4618      	mov	r0, r3
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	e000e010 	.word	0xe000e010

08000734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff47 	bl	80005d0 <__NVIC_SetPriorityGrouping>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	4603      	mov	r3, r0
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800075c:	f7ff ff5c 	bl	8000618 <__NVIC_GetPriorityGrouping>
 8000760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	68b9      	ldr	r1, [r7, #8]
 8000766:	6978      	ldr	r0, [r7, #20]
 8000768:	f7ff ff8e 	bl	8000688 <NVIC_EncodePriority>
 800076c:	4602      	mov	r2, r0
 800076e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000772:	4611      	mov	r1, r2
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff5d 	bl	8000634 <__NVIC_SetPriority>
}
 800077a:	bf00      	nop
 800077c:	3718      	adds	r7, #24
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ffb0 	bl	80006f0 <SysTick_Config>
 8000790:	4603      	mov	r3, r0
}
 8000792:	4618      	mov	r0, r3
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
	...

0800079c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800079c:	b480      	push	{r7}
 800079e:	b087      	sub	sp, #28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007aa:	e14e      	b.n	8000a4a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	2101      	movs	r1, #1
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	fa01 f303 	lsl.w	r3, r1, r3
 80007b8:	4013      	ands	r3, r2
 80007ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	f000 8140 	beq.w	8000a44 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	f003 0303 	and.w	r3, r3, #3
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d005      	beq.n	80007dc <HAL_GPIO_Init+0x40>
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	2b02      	cmp	r3, #2
 80007da:	d130      	bne.n	800083e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	43db      	mvns	r3, r3
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	4313      	orrs	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	693a      	ldr	r2, [r7, #16]
 800080a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000812:	2201      	movs	r2, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	43db      	mvns	r3, r3
 800081c:	693a      	ldr	r2, [r7, #16]
 800081e:	4013      	ands	r3, r2
 8000820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	091b      	lsrs	r3, r3, #4
 8000828:	f003 0201 	and.w	r2, r3, #1
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	4313      	orrs	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f003 0303 	and.w	r3, r3, #3
 8000846:	2b03      	cmp	r3, #3
 8000848:	d017      	beq.n	800087a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	2203      	movs	r2, #3
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	43db      	mvns	r3, r3
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4013      	ands	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	2b02      	cmp	r3, #2
 8000884:	d123      	bne.n	80008ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	08da      	lsrs	r2, r3, #3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3208      	adds	r2, #8
 800088e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	f003 0307 	and.w	r3, r3, #7
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	220f      	movs	r2, #15
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	4013      	ands	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	691a      	ldr	r2, [r3, #16]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	f003 0307 	and.w	r3, r3, #7
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	08da      	lsrs	r2, r3, #3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3208      	adds	r2, #8
 80008c8:	6939      	ldr	r1, [r7, #16]
 80008ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	43db      	mvns	r3, r3
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	f003 0203 	and.w	r2, r3, #3
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800090a:	2b00      	cmp	r3, #0
 800090c:	f000 809a 	beq.w	8000a44 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	4b55      	ldr	r3, [pc, #340]	; (8000a68 <HAL_GPIO_Init+0x2cc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a54      	ldr	r2, [pc, #336]	; (8000a68 <HAL_GPIO_Init+0x2cc>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b52      	ldr	r3, [pc, #328]	; (8000a68 <HAL_GPIO_Init+0x2cc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000928:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_GPIO_Init+0x2d0>)
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	089b      	lsrs	r3, r3, #2
 800092e:	3302      	adds	r3, #2
 8000930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	f003 0303 	and.w	r3, r3, #3
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000952:	d013      	beq.n	800097c <HAL_GPIO_Init+0x1e0>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a46      	ldr	r2, [pc, #280]	; (8000a70 <HAL_GPIO_Init+0x2d4>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d00d      	beq.n	8000978 <HAL_GPIO_Init+0x1dc>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a45      	ldr	r2, [pc, #276]	; (8000a74 <HAL_GPIO_Init+0x2d8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d007      	beq.n	8000974 <HAL_GPIO_Init+0x1d8>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a44      	ldr	r2, [pc, #272]	; (8000a78 <HAL_GPIO_Init+0x2dc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d101      	bne.n	8000970 <HAL_GPIO_Init+0x1d4>
 800096c:	2303      	movs	r3, #3
 800096e:	e006      	b.n	800097e <HAL_GPIO_Init+0x1e2>
 8000970:	2305      	movs	r3, #5
 8000972:	e004      	b.n	800097e <HAL_GPIO_Init+0x1e2>
 8000974:	2302      	movs	r3, #2
 8000976:	e002      	b.n	800097e <HAL_GPIO_Init+0x1e2>
 8000978:	2301      	movs	r3, #1
 800097a:	e000      	b.n	800097e <HAL_GPIO_Init+0x1e2>
 800097c:	2300      	movs	r3, #0
 800097e:	697a      	ldr	r2, [r7, #20]
 8000980:	f002 0203 	and.w	r2, r2, #3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4093      	lsls	r3, r2
 8000988:	693a      	ldr	r2, [r7, #16]
 800098a:	4313      	orrs	r3, r2
 800098c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800098e:	4937      	ldr	r1, [pc, #220]	; (8000a6c <HAL_GPIO_Init+0x2d0>)
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4313      	orrs	r3, r2
 80009be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009c0:	4a2e      	ldr	r2, [pc, #184]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80009c6:	4b2d      	ldr	r3, [pc, #180]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 80009c8:	68db      	ldr	r3, [r3, #12]
 80009ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80009ea:	4a24      	ldr	r2, [pc, #144]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d003      	beq.n	8000a3e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a3e:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_GPIO_Init+0x2e0>)
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	3301      	adds	r3, #1
 8000a48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fa22 f303 	lsr.w	r3, r2, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f47f aea9 	bne.w	80007ac <HAL_GPIO_Init+0x10>
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	371c      	adds	r7, #28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010000 	.word	0x40010000
 8000a70:	48000400 	.word	0x48000400
 8000a74:	48000800 	.word	0x48000800
 8000a78:	48000c00 	.word	0x48000c00
 8000a7c:	40010400 	.word	0x40010400

08000a80 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a92:	887a      	ldrh	r2, [r7, #2]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4013      	ands	r3, r2
 8000a98:	041a      	lsls	r2, r3, #16
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	43d9      	mvns	r1, r3
 8000a9e:	887b      	ldrh	r3, [r7, #2]
 8000aa0:	400b      	ands	r3, r1
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	619a      	str	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ac0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ac4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	f001 b823 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	f000 817d 	beq.w	8000dea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000af0:	4bbc      	ldr	r3, [pc, #752]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 030c 	and.w	r3, r3, #12
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d00c      	beq.n	8000b16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000afc:	4bb9      	ldr	r3, [pc, #740]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 030c 	and.w	r3, r3, #12
 8000b04:	2b08      	cmp	r3, #8
 8000b06:	d15c      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x10e>
 8000b08:	4bb6      	ldr	r3, [pc, #728]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b14:	d155      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x10e>
 8000b16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000b22:	fa93 f3a3 	rbit	r3, r3
 8000b26:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2e:	fab3 f383 	clz	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	095b      	lsrs	r3, r3, #5
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d102      	bne.n	8000b48 <HAL_RCC_OscConfig+0x94>
 8000b42:	4ba8      	ldr	r3, [pc, #672]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	e015      	b.n	8000b74 <HAL_RCC_OscConfig+0xc0>
 8000b48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000b54:	fa93 f3a3 	rbit	r3, r3
 8000b58:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000b5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b60:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000b64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000b68:	fa93 f3a3 	rbit	r3, r3
 8000b6c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000b70:	4b9c      	ldr	r3, [pc, #624]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b78:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000b7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000b80:	fa92 f2a2 	rbit	r2, r2
 8000b84:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000b88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	f042 0220 	orr.w	r2, r2, #32
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	f002 021f 	and.w	r2, r2, #31
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f000 811f 	beq.w	8000de8 <HAL_RCC_OscConfig+0x334>
 8000baa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8116 	bne.w	8000de8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f000 bfaf 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd2:	d106      	bne.n	8000be2 <HAL_RCC_OscConfig+0x12e>
 8000bd4:	4b83      	ldr	r3, [pc, #524]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a82      	ldr	r2, [pc, #520]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	e036      	b.n	8000c50 <HAL_RCC_OscConfig+0x19c>
 8000be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000be6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x158>
 8000bf2:	4b7c      	ldr	r3, [pc, #496]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a7b      	ldr	r2, [pc, #492]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	4b79      	ldr	r3, [pc, #484]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a78      	ldr	r2, [pc, #480]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e021      	b.n	8000c50 <HAL_RCC_OscConfig+0x19c>
 8000c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x184>
 8000c1e:	4b71      	ldr	r3, [pc, #452]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a70      	ldr	r2, [pc, #448]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b6e      	ldr	r3, [pc, #440]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a6d      	ldr	r2, [pc, #436]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e00b      	b.n	8000c50 <HAL_RCC_OscConfig+0x19c>
 8000c38:	4b6a      	ldr	r3, [pc, #424]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a69      	ldr	r2, [pc, #420]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a66      	ldr	r2, [pc, #408]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c50:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c54:	f023 020f 	bic.w	r2, r3, #15
 8000c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	495f      	ldr	r1, [pc, #380]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d059      	beq.n	8000d2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc79 	bl	8000570 <HAL_GetTick>
 8000c7e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c82:	e00a      	b.n	8000c9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c84:	f7ff fc74 	bl	8000570 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c8e:	1ad3      	subs	r3, r2, r3
 8000c90:	2b64      	cmp	r3, #100	; 0x64
 8000c92:	d902      	bls.n	8000c9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000c94:	2303      	movs	r3, #3
 8000c96:	f000 bf43 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 8000c9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c9e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000ca6:	fa93 f3a3 	rbit	r3, r3
 8000caa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000cae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cb2:	fab3 f383 	clz	r3, r3
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	095b      	lsrs	r3, r3, #5
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d102      	bne.n	8000ccc <HAL_RCC_OscConfig+0x218>
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	e015      	b.n	8000cf8 <HAL_RCC_OscConfig+0x244>
 8000ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cd0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000cd8:	fa93 f3a3 	rbit	r3, r3
 8000cdc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ce4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ce8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000cec:	fa93 f3a3 	rbit	r3, r3
 8000cf0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000cf4:	4b3b      	ldr	r3, [pc, #236]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cfc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000d00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000d04:	fa92 f2a2 	rbit	r2, r2
 8000d08:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000d0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	f042 0220 	orr.w	r2, r2, #32
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	f002 021f 	and.w	r2, r2, #31
 8000d20:	2101      	movs	r1, #1
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0ab      	beq.n	8000c84 <HAL_RCC_OscConfig+0x1d0>
 8000d2c:	e05d      	b.n	8000dea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff fc1f 	bl	8000570 <HAL_GetTick>
 8000d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fc1a 	bl	8000570 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b64      	cmp	r3, #100	; 0x64
 8000d46:	d902      	bls.n	8000d4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f000 bee9 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 8000d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d52:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000d5a:	fa93 f3a3 	rbit	r3, r3
 8000d5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000d62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	fab3 f383 	clz	r3, r3
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	095b      	lsrs	r3, r3, #5
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d102      	bne.n	8000d80 <HAL_RCC_OscConfig+0x2cc>
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	e015      	b.n	8000dac <HAL_RCC_OscConfig+0x2f8>
 8000d80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d84:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000d8c:	fa93 f3a3 	rbit	r3, r3
 8000d90:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d98:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000d9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000da0:	fa93 f3a3 	rbit	r3, r3
 8000da4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000da8:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <HAL_RCC_OscConfig+0x330>)
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000db0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000db4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000db8:	fa92 f2a2 	rbit	r2, r2
 8000dbc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000dc0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f042 0220 	orr.w	r2, r2, #32
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	f002 021f 	and.w	r2, r2, #31
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1ab      	bne.n	8000d38 <HAL_RCC_OscConfig+0x284>
 8000de0:	e003      	b.n	8000dea <HAL_RCC_OscConfig+0x336>
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 817d 	beq.w	80010fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e00:	4ba6      	ldr	r3, [pc, #664]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 030c 	and.w	r3, r3, #12
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00b      	beq.n	8000e24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e0c:	4ba3      	ldr	r3, [pc, #652]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 030c 	and.w	r3, r3, #12
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d172      	bne.n	8000efe <HAL_RCC_OscConfig+0x44a>
 8000e18:	4ba0      	ldr	r3, [pc, #640]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d16c      	bne.n	8000efe <HAL_RCC_OscConfig+0x44a>
 8000e24:	2302      	movs	r3, #2
 8000e26:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000e2e:	fa93 f3a3 	rbit	r3, r3
 8000e32:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000e36:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3a:	fab3 f383 	clz	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	095b      	lsrs	r3, r3, #5
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d102      	bne.n	8000e54 <HAL_RCC_OscConfig+0x3a0>
 8000e4e:	4b93      	ldr	r3, [pc, #588]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	e013      	b.n	8000e7c <HAL_RCC_OscConfig+0x3c8>
 8000e54:	2302      	movs	r3, #2
 8000e56:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e5e:	fa93 f3a3 	rbit	r3, r3
 8000e62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000e66:	2302      	movs	r3, #2
 8000e68:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000e6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e70:	fa93 f3a3 	rbit	r3, r3
 8000e74:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000e78:	4b88      	ldr	r3, [pc, #544]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000e82:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e86:	fa92 f2a2 	rbit	r2, r2
 8000e8a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000e8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000e92:	fab2 f282 	clz	r2, r2
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	f042 0220 	orr.w	r2, r2, #32
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	f002 021f 	and.w	r2, r2, #31
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00a      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x410>
 8000eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d002      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f000 be2e 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4b75      	ldr	r3, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ecc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	21f8      	movs	r1, #248	; 0xf8
 8000eda:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000ee2:	fa91 f1a1 	rbit	r1, r1
 8000ee6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000eea:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000eee:	fab1 f181 	clz	r1, r1
 8000ef2:	b2c9      	uxtb	r1, r1
 8000ef4:	408b      	lsls	r3, r1
 8000ef6:	4969      	ldr	r1, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efc:	e0fd      	b.n	80010fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f000 8088 	beq.w	8001020 <HAL_RCC_OscConfig+0x56c>
 8000f10:	2301      	movs	r3, #1
 8000f12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8000f22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f26:	fab3 f383 	clz	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	461a      	mov	r2, r3
 8000f38:	2301      	movs	r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3c:	f7ff fb18 	bl	8000570 <HAL_GetTick>
 8000f40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f44:	e00a      	b.n	8000f5c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f46:	f7ff fb13 	bl	8000570 <HAL_GetTick>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d902      	bls.n	8000f5c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f000 bde2 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8000f6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f72:	fab3 f383 	clz	r3, r3
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	095b      	lsrs	r3, r3, #5
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d102      	bne.n	8000f8c <HAL_RCC_OscConfig+0x4d8>
 8000f86:	4b45      	ldr	r3, [pc, #276]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	e013      	b.n	8000fb4 <HAL_RCC_OscConfig+0x500>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000f96:	fa93 f3a3 	rbit	r3, r3
 8000f9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000fa4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000fa8:	fa93 f3a3 	rbit	r3, r3
 8000fac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8000fba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8000fc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0af      	beq.n	8000f46 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe6:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ff2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	21f8      	movs	r1, #248	; 0xf8
 8000ffc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001000:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001004:	fa91 f1a1 	rbit	r1, r1
 8001008:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800100c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001010:	fab1 f181 	clz	r1, r1
 8001014:	b2c9      	uxtb	r1, r1
 8001016:	408b      	lsls	r3, r1
 8001018:	4920      	ldr	r1, [pc, #128]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 800101a:	4313      	orrs	r3, r2
 800101c:	600b      	str	r3, [r1, #0]
 800101e:	e06c      	b.n	80010fa <HAL_RCC_OscConfig+0x646>
 8001020:	2301      	movs	r3, #1
 8001022:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001026:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800102a:	fa93 f3a3 	rbit	r3, r3
 800102e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001032:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001040:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	461a      	mov	r2, r3
 8001048:	2300      	movs	r3, #0
 800104a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104c:	f7ff fa90 	bl	8000570 <HAL_GetTick>
 8001050:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001054:	e00a      	b.n	800106c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001056:	f7ff fa8b 	bl	8000570 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d902      	bls.n	800106c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	f000 bd5a 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001072:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800107e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001082:	fab3 f383 	clz	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	b2db      	uxtb	r3, r3
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d104      	bne.n	80010a0 <HAL_RCC_OscConfig+0x5ec>
 8001096:	4b01      	ldr	r3, [pc, #4]	; (800109c <HAL_RCC_OscConfig+0x5e8>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	e015      	b.n	80010c8 <HAL_RCC_OscConfig+0x614>
 800109c:	40021000 	.word	0x40021000
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80010aa:	fa93 f3a3 	rbit	r3, r3
 80010ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010bc:	fa93 f3a3 	rbit	r3, r3
 80010c0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80010c4:	4bc8      	ldr	r3, [pc, #800]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c8:	2202      	movs	r2, #2
 80010ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80010ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80010d2:	fa92 f2a2 	rbit	r2, r2
 80010d6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80010da:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80010de:	fab2 f282 	clz	r2, r2
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	f042 0220 	orr.w	r2, r2, #32
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	f002 021f 	and.w	r2, r2, #31
 80010ee:	2101      	movs	r1, #1
 80010f0:	fa01 f202 	lsl.w	r2, r1, r2
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1ad      	bne.n	8001056 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 8110 	beq.w	8001330 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d079      	beq.n	8001214 <HAL_RCC_OscConfig+0x760>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001132:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	4bab      	ldr	r3, [pc, #684]	; (80013ec <HAL_RCC_OscConfig+0x938>)
 8001140:	4413      	add	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	2301      	movs	r3, #1
 8001148:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114a:	f7ff fa11 	bl	8000570 <HAL_GetTick>
 800114e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e00a      	b.n	800116a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fa0c 	bl	8000570 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d902      	bls.n	800116a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	f000 bcdb 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001170:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001174:	fa93 f3a3 	rbit	r3, r3
 8001178:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800117c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001180:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800118c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	fa93 f2a3 	rbit	r2, r3
 8001196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800119a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011a8:	2202      	movs	r2, #2
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	fa93 f2a3 	rbit	r2, r3
 80011ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80011c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c4:	4b88      	ldr	r3, [pc, #544]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 80011c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011d0:	2102      	movs	r1, #2
 80011d2:	6019      	str	r1, [r3, #0]
 80011d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011d8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	fa93 f1a3 	rbit	r1, r3
 80011e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011ea:	6019      	str	r1, [r3, #0]
  return result;
 80011ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011f0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2101      	movs	r1, #1
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0a0      	beq.n	8001154 <HAL_RCC_OscConfig+0x6a0>
 8001212:	e08d      	b.n	8001330 <HAL_RCC_OscConfig+0x87c>
 8001214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001218:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001224:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	fa93 f2a3 	rbit	r2, r3
 800122e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001232:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001236:	601a      	str	r2, [r3, #0]
  return result;
 8001238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800123c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001240:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001242:	fab3 f383 	clz	r3, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_OscConfig+0x938>)
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	461a      	mov	r2, r3
 8001252:	2300      	movs	r3, #0
 8001254:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001256:	f7ff f98b 	bl	8000570 <HAL_GetTick>
 800125a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff f986 	bl	8000570 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d902      	bls.n	8001276 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	f000 bc55 	b.w	8001b20 <HAL_RCC_OscConfig+0x106c>
 8001276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800127a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800127e:	2202      	movs	r2, #2
 8001280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001286:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	fa93 f2a3 	rbit	r2, r3
 8001290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001294:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800129e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012a2:	2202      	movs	r2, #2
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	fa93 f2a3 	rbit	r2, r3
 80012b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012c6:	2202      	movs	r2, #2
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	fa93 f2a3 	rbit	r2, r3
 80012d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e2:	4b41      	ldr	r3, [pc, #260]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 80012e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012ee:	2102      	movs	r1, #2
 80012f0:	6019      	str	r1, [r3, #0]
 80012f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012f6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	fa93 f1a3 	rbit	r1, r3
 8001300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001304:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001308:	6019      	str	r1, [r3, #0]
  return result;
 800130a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	fab3 f383 	clz	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	4013      	ands	r3, r2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d197      	bne.n	8001260 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001330:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 81a1 	beq.w	8001688 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800134c:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d116      	bne.n	8001386 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001358:	4b23      	ldr	r3, [pc, #140]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 800135e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001362:	61d3      	str	r3, [r2, #28]
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800136c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001370:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800137e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001380:	2301      	movs	r3, #1
 8001382:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_RCC_OscConfig+0x93c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d11a      	bne.n	80013c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_RCC_OscConfig+0x93c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_RCC_OscConfig+0x93c>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff f8e7 	bl	8000570 <HAL_GetTick>
 80013a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a6:	e009      	b.n	80013bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a8:	f7ff f8e2 	bl	8000570 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b64      	cmp	r3, #100	; 0x64
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e3b1      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_RCC_OscConfig+0x93c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0ef      	beq.n	80013a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d10d      	bne.n	80013f4 <HAL_RCC_OscConfig+0x940>
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a02      	ldr	r2, [pc, #8]	; (80013e8 <HAL_RCC_OscConfig+0x934>)
 80013de:	f043 0301 	orr.w	r3, r3, #1
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	e03c      	b.n	8001460 <HAL_RCC_OscConfig+0x9ac>
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000
 80013ec:	10908120 	.word	0x10908120
 80013f0:	40007000 	.word	0x40007000
 80013f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x96a>
 8001404:	4bc1      	ldr	r3, [pc, #772]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4ac0      	ldr	r2, [pc, #768]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800140a:	f023 0301 	bic.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	4bbe      	ldr	r3, [pc, #760]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	4abd      	ldr	r2, [pc, #756]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001416:	f023 0304 	bic.w	r3, r3, #4
 800141a:	6213      	str	r3, [r2, #32]
 800141c:	e020      	b.n	8001460 <HAL_RCC_OscConfig+0x9ac>
 800141e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	2b05      	cmp	r3, #5
 800142c:	d10c      	bne.n	8001448 <HAL_RCC_OscConfig+0x994>
 800142e:	4bb7      	ldr	r3, [pc, #732]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4ab6      	ldr	r2, [pc, #728]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	6213      	str	r3, [r2, #32]
 800143a:	4bb4      	ldr	r3, [pc, #720]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	4ab3      	ldr	r2, [pc, #716]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6213      	str	r3, [r2, #32]
 8001446:	e00b      	b.n	8001460 <HAL_RCC_OscConfig+0x9ac>
 8001448:	4bb0      	ldr	r3, [pc, #704]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4aaf      	ldr	r2, [pc, #700]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800144e:	f023 0301 	bic.w	r3, r3, #1
 8001452:	6213      	str	r3, [r2, #32]
 8001454:	4bad      	ldr	r3, [pc, #692]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4aac      	ldr	r2, [pc, #688]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001464:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 8081 	beq.w	8001574 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff f87d 	bl	8000570 <HAL_GetTick>
 8001476:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800147c:	f7ff f878 	bl	8000570 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e345      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
 8001494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001498:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800149c:	2202      	movs	r2, #2
 800149e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014c0:	2202      	movs	r2, #2
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014da:	601a      	str	r2, [r3, #0]
  return result;
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80014e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e6:	fab3 f383 	clz	r3, r3
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	095b      	lsrs	r3, r3, #5
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d102      	bne.n	8001500 <HAL_RCC_OscConfig+0xa4c>
 80014fa:	4b84      	ldr	r3, [pc, #528]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0xa74>
 8001500:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001504:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001510:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	fa93 f2a3 	rbit	r2, r3
 800151a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	4b79      	ldr	r3, [pc, #484]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800152c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001530:	2102      	movs	r1, #2
 8001532:	6011      	str	r1, [r2, #0]
 8001534:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001538:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	fa92 f1a2 	rbit	r1, r2
 8001542:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001546:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800154a:	6011      	str	r1, [r2, #0]
  return result;
 800154c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001550:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	fab2 f282 	clz	r2, r2
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	f002 021f 	and.w	r2, r2, #31
 8001566:	2101      	movs	r1, #1
 8001568:	fa01 f202 	lsl.w	r2, r1, r2
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d084      	beq.n	800147c <HAL_RCC_OscConfig+0x9c8>
 8001572:	e07f      	b.n	8001674 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7fe fffc 	bl	8000570 <HAL_GetTick>
 8001578:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7fe fff7 	bl	8000570 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e2c4      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800159e:	2202      	movs	r2, #2
 80015a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	fa93 f2a3 	rbit	r2, r3
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015c2:	2202      	movs	r2, #2
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ca:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	fa93 f2a3 	rbit	r2, r3
 80015d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015dc:	601a      	str	r2, [r3, #0]
  return result;
 80015de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80015e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	fab3 f383 	clz	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d102      	bne.n	8001602 <HAL_RCC_OscConfig+0xb4e>
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	e013      	b.n	800162a <HAL_RCC_OscConfig+0xb76>
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001612:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	fa93 f2a3 	rbit	r2, r3
 800161c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001620:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800162e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001632:	2102      	movs	r1, #2
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800163a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	fa92 f1a2 	rbit	r1, r2
 8001644:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001648:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800164c:	6011      	str	r1, [r2, #0]
  return result;
 800164e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001652:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	fab2 f282 	clz	r2, r2
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	f002 021f 	and.w	r2, r2, #31
 8001668:	2101      	movs	r1, #1
 800166a:	fa01 f202 	lsl.w	r2, r1, r2
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d184      	bne.n	800157e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001674:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001678:	2b01      	cmp	r3, #1
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	4a22      	ldr	r2, [pc, #136]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 8001682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001686:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8242 	beq.w	8001b1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_RCC_OscConfig+0xc58>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	f000 8213 	beq.w	8001ace <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	f040 8162 	bne.w	800197e <HAL_RCC_OscConfig+0xeca>
 80016ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016be:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80016c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80016c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016cc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	fa93 f2a3 	rbit	r2, r3
 80016d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016da:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016de:	601a      	str	r2, [r3, #0]
  return result;
 80016e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80016e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	461a      	mov	r2, r3
 80016fc:	2300      	movs	r3, #0
 80016fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001700:	f7fe ff36 	bl	8000570 <HAL_GetTick>
 8001704:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	e00c      	b.n	8001724 <HAL_RCC_OscConfig+0xc70>
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7fe ff2e 	bl	8000570 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1fd      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800172c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	fa93 f2a3 	rbit	r2, r3
 8001740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001744:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001748:	601a      	str	r2, [r3, #0]
  return result;
 800174a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001752:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	fab3 f383 	clz	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	b2db      	uxtb	r3, r3
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d102      	bne.n	800176e <HAL_RCC_OscConfig+0xcba>
 8001768:	4bb0      	ldr	r3, [pc, #704]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	e027      	b.n	80017be <HAL_RCC_OscConfig+0xd0a>
 800176e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001772:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001776:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800177a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001780:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	fa93 f2a3 	rbit	r2, r3
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800179c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f2a3 	rbit	r2, r3
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	4b9c      	ldr	r3, [pc, #624]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80017c6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80017ca:	6011      	str	r1, [r2, #0]
 80017cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80017d4:	6812      	ldr	r2, [r2, #0]
 80017d6:	fa92 f1a2 	rbit	r1, r2
 80017da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017de:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017e2:	6011      	str	r1, [r2, #0]
  return result;
 80017e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f002 021f 	and.w	r2, r2, #31
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d182      	bne.n	8001710 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180a:	4b88      	ldr	r3, [pc, #544]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001816:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800181e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	430b      	orrs	r3, r1
 800182c:	497f      	ldr	r1, [pc, #508]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800183a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800183e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001844:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	fa93 f2a3 	rbit	r2, r3
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001856:	601a      	str	r2, [r3, #0]
  return result;
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001860:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001862:	fab3 f383 	clz	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800186c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	461a      	mov	r2, r3
 8001874:	2301      	movs	r3, #1
 8001876:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7fe fe7a 	bl	8000570 <HAL_GetTick>
 800187c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	e009      	b.n	8001896 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001882:	f7fe fe75 	bl	8000570 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e144      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800189e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018ba:	601a      	str	r2, [r3, #0]
  return result;
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80018c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c6:	fab3 f383 	clz	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	095b      	lsrs	r3, r3, #5
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d102      	bne.n	80018e0 <HAL_RCC_OscConfig+0xe2c>
 80018da:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	e027      	b.n	8001930 <HAL_RCC_OscConfig+0xe7c>
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	fa93 f2a3 	rbit	r2, r3
 80018fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001900:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800190e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001918:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f2a3 	rbit	r2, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001926:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 800192e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001930:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001934:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001938:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800193c:	6011      	str	r1, [r2, #0]
 800193e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001942:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	fa92 f1a2 	rbit	r1, r2
 800194c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001950:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001954:	6011      	str	r1, [r2, #0]
  return result;
 8001956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800195a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	fab2 f282 	clz	r2, r2
 8001964:	b2d2      	uxtb	r2, r2
 8001966:	f042 0220 	orr.w	r2, r2, #32
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	f002 021f 	and.w	r2, r2, #31
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	4013      	ands	r3, r2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d082      	beq.n	8001882 <HAL_RCC_OscConfig+0xdce>
 800197c:	e0cf      	b.n	8001b1e <HAL_RCC_OscConfig+0x106a>
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001986:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019a2:	601a      	str	r2, [r3, #0]
  return result;
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80019ac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	461a      	mov	r2, r3
 80019c0:	2300      	movs	r3, #0
 80019c2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7fe fdd4 	bl	8000570 <HAL_GetTick>
 80019c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	e009      	b.n	80019e2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ce:	f7fe fdcf 	bl	8000570 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e09e      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	fa93 f2a3 	rbit	r2, r3
 80019fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a02:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a06:	601a      	str	r2, [r3, #0]
  return result;
 8001a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d104      	bne.n	8001a30 <HAL_RCC_OscConfig+0xf7c>
 8001a26:	4b01      	ldr	r3, [pc, #4]	; (8001a2c <HAL_RCC_OscConfig+0xf78>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	e029      	b.n	8001a80 <HAL_RCC_OscConfig+0xfcc>
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a42:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a5a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a76:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_RCC_OscConfig+0x1078>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a84:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a8c:	6011      	str	r1, [r2, #0]
 8001a8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a92:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	fa92 f1a2 	rbit	r1, r2
 8001a9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aa0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001aa4:	6011      	str	r1, [r2, #0]
  return result;
 8001aa6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001aaa:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	fab2 f282 	clz	r2, r2
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	f002 021f 	and.w	r2, r2, #31
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d180      	bne.n	80019ce <HAL_RCC_OscConfig+0xf1a>
 8001acc:	e027      	b.n	8001b1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e01e      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_RCC_OscConfig+0x1078>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001aea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10b      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001b02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b09e      	sub	sp, #120	; 0x78
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e162      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4b90      	ldr	r3, [pc, #576]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d910      	bls.n	8001b78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b8d      	ldr	r3, [pc, #564]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 0207 	bic.w	r2, r3, #7
 8001b5e:	498b      	ldr	r1, [pc, #556]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e14a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b84:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	497f      	ldr	r1, [pc, #508]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80dc 	beq.w	8001d5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d13c      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xf6>
 8001bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbc:	fab3 f383 	clz	r3, r3
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xa6>
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	e00f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0xc6>
 8001bd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bde:	fa93 f3a3 	rbit	r3, r3
 8001be2:	667b      	str	r3, [r7, #100]	; 0x64
 8001be4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be8:	663b      	str	r3, [r7, #96]	; 0x60
 8001bea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bec:	fa93 f3a3 	rbit	r3, r3
 8001bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001bf2:	4b67      	ldr	r3, [pc, #412]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bfa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bfe:	fa92 f2a2 	rbit	r2, r2
 8001c02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c06:	fab2 f282 	clz	r2, r2
 8001c0a:	b2d2      	uxtb	r2, r2
 8001c0c:	f042 0220 	orr.w	r2, r2, #32
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	2101      	movs	r1, #1
 8001c18:	fa01 f202 	lsl.w	r2, r1, r2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d17b      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0f3      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d13c      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x178>
 8001c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d102      	bne.n	8001c58 <HAL_RCC_ClockConfig+0x128>
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	e00f      	b.n	8001c78 <HAL_RCC_ClockConfig+0x148>
 8001c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c60:	fa93 f3a3 	rbit	r3, r3
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
 8001c66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001c6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c74:	4b46      	ldr	r3, [pc, #280]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c80:	fa92 f2a2 	rbit	r2, r2
 8001c84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f002 021f 	and.w	r2, r2, #31
 8001c98:	2101      	movs	r1, #1
 8001c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d13a      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0b2      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d102      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x1a0>
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	e00d      	b.n	8001cec <HAL_RCC_ClockConfig+0x1bc>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	2302      	movs	r3, #2
 8001cde:	623b      	str	r3, [r7, #32]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	4b29      	ldr	r3, [pc, #164]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2202      	movs	r2, #2
 8001cee:	61ba      	str	r2, [r7, #24]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	fa92 f2a2 	rbit	r2, r2
 8001cf6:	617a      	str	r2, [r7, #20]
  return result;
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	fab2 f282 	clz	r2, r2
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f042 0220 	orr.w	r2, r2, #32
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	f002 021f 	and.w	r2, r2, #31
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e079      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	491a      	ldr	r1, [pc, #104]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7fe fc20 	bl	8000570 <HAL_GetTick>
 8001d30:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7fe fc1c 	bl	8000570 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e061      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d214      	bcs.n	8001d94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4906      	ldr	r1, [pc, #24]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d005      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e040      	b.n	8001e0e <HAL_RCC_ClockConfig+0x2de>
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d008      	beq.n	8001db2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_RCC_ClockConfig+0x2e8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	491a      	ldr	r1, [pc, #104]	; (8001e18 <HAL_RCC_ClockConfig+0x2e8>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d009      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dbe:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <HAL_RCC_ClockConfig+0x2e8>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4912      	ldr	r1, [pc, #72]	; (8001e18 <HAL_RCC_ClockConfig+0x2e8>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dd2:	f000 f829 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001dd6:	4601      	mov	r1, r0
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_ClockConfig+0x2e8>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001de0:	22f0      	movs	r2, #240	; 0xf0
 8001de2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	fa92 f2a2 	rbit	r2, r2
 8001dea:	60fa      	str	r2, [r7, #12]
  return result;
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	fab2 f282 	clz	r2, r2
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	40d3      	lsrs	r3, r2
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x2ec>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_RCC_ClockConfig+0x2f0>)
 8001e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001e02:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCC_ClockConfig+0x2f4>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb6e 	bl	80004e8 <HAL_InitTick>
  
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3778      	adds	r7, #120	; 0x78
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08002740 	.word	0x08002740
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000004 	.word	0x20000004

08001e28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b08b      	sub	sp, #44	; 0x2c
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e42:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_GetSysClockFreq+0x30>
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d003      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x36>
 8001e56:	e03c      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e58:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e5a:	623b      	str	r3, [r7, #32]
      break;
 8001e5c:	e03c      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e64:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	fa92 f2a2 	rbit	r2, r2
 8001e70:	607a      	str	r2, [r7, #4]
  return result;
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	fab2 f282 	clz	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	40d3      	lsrs	r3, r2
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	fa92 f2a2 	rbit	r2, r2
 8001e94:	60fa      	str	r2, [r7, #12]
  return result;
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	fab2 f282 	clz	r2, r2
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	40d3      	lsrs	r3, r2
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ea2:	5cd3      	ldrb	r3, [r2, r3]
 8001ea4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec0:	e004      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ec6:	fb02 f303 	mul.w	r3, r2, r3
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	623b      	str	r3, [r7, #32]
      break;
 8001ed0:	e002      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ed4:	623b      	str	r3, [r7, #32]
      break;
 8001ed6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed8:	6a3b      	ldr	r3, [r7, #32]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	372c      	adds	r7, #44	; 0x2c
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	007a1200 	.word	0x007a1200
 8001ef0:	08002758 	.word	0x08002758
 8001ef4:	08002768 	.word	0x08002768
 8001ef8:	003d0900 	.word	0x003d0900

08001efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f00:	4b03      	ldr	r3, [pc, #12]	; (8001f10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	20000000 	.word	0x20000000

08001f14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f1a:	f7ff ffef 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f1e:	4601      	mov	r1, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f2c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	fa92 f2a2 	rbit	r2, r2
 8001f34:	603a      	str	r2, [r7, #0]
  return result;
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	fab2 f282 	clz	r2, r2
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	40d3      	lsrs	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40021000 	.word	0x40021000
 8001f54:	08002750 	.word	0x08002750

08001f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f5e:	f7ff ffcd 	bl	8001efc <HAL_RCC_GetHCLKFreq>
 8001f62:	4601      	mov	r1, r0
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f70:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	fa92 f2a2 	rbit	r2, r2
 8001f78:	603a      	str	r2, [r7, #0]
  return result;
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	fab2 f282 	clz	r2, r2
 8001f80:	b2d2      	uxtb	r2, r2
 8001f82:	40d3      	lsrs	r3, r2
 8001f84:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	08002750 	.word	0x08002750

08001f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e040      	b.n	8002030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d106      	bne.n	8001fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7fe f9d2 	bl	8000368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0201 	bic.w	r2, r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f82c 	bl	8002038 <UART_SetConfig>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e022      	b.n	8002030 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f956 	bl	80022a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f9dd 	bl	80023e8 <UART_CheckIdleState>
 800202e:	4603      	mov	r3, r0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	695b      	ldr	r3, [r3, #20]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b8a      	ldr	r3, [pc, #552]	; (800228c <UART_SetConfig+0x254>)
 8002064:	4013      	ands	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	6979      	ldr	r1, [r7, #20]
 800206c:	430b      	orrs	r3, r1
 800206e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a78      	ldr	r2, [pc, #480]	; (8002290 <UART_SetConfig+0x258>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d120      	bne.n	80020f6 <UART_SetConfig+0xbe>
 80020b4:	4b77      	ldr	r3, [pc, #476]	; (8002294 <UART_SetConfig+0x25c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d817      	bhi.n	80020f0 <UART_SetConfig+0xb8>
 80020c0:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <UART_SetConfig+0x90>)
 80020c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c6:	bf00      	nop
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020eb 	.word	0x080020eb
 80020d4:	080020df 	.word	0x080020df
 80020d8:	2300      	movs	r3, #0
 80020da:	77fb      	strb	r3, [r7, #31]
 80020dc:	e01d      	b.n	800211a <UART_SetConfig+0xe2>
 80020de:	2302      	movs	r3, #2
 80020e0:	77fb      	strb	r3, [r7, #31]
 80020e2:	e01a      	b.n	800211a <UART_SetConfig+0xe2>
 80020e4:	2304      	movs	r3, #4
 80020e6:	77fb      	strb	r3, [r7, #31]
 80020e8:	e017      	b.n	800211a <UART_SetConfig+0xe2>
 80020ea:	2308      	movs	r3, #8
 80020ec:	77fb      	strb	r3, [r7, #31]
 80020ee:	e014      	b.n	800211a <UART_SetConfig+0xe2>
 80020f0:	2310      	movs	r3, #16
 80020f2:	77fb      	strb	r3, [r7, #31]
 80020f4:	e011      	b.n	800211a <UART_SetConfig+0xe2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a67      	ldr	r2, [pc, #412]	; (8002298 <UART_SetConfig+0x260>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d102      	bne.n	8002106 <UART_SetConfig+0xce>
 8002100:	2300      	movs	r3, #0
 8002102:	77fb      	strb	r3, [r7, #31]
 8002104:	e009      	b.n	800211a <UART_SetConfig+0xe2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a64      	ldr	r2, [pc, #400]	; (800229c <UART_SetConfig+0x264>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d102      	bne.n	8002116 <UART_SetConfig+0xde>
 8002110:	2300      	movs	r3, #0
 8002112:	77fb      	strb	r3, [r7, #31]
 8002114:	e001      	b.n	800211a <UART_SetConfig+0xe2>
 8002116:	2310      	movs	r3, #16
 8002118:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002122:	d15a      	bne.n	80021da <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b08      	cmp	r3, #8
 8002128:	d827      	bhi.n	800217a <UART_SetConfig+0x142>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <UART_SetConfig+0xf8>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002155 	.word	0x08002155
 8002134:	0800215d 	.word	0x0800215d
 8002138:	08002165 	.word	0x08002165
 800213c:	0800217b 	.word	0x0800217b
 8002140:	0800216b 	.word	0x0800216b
 8002144:	0800217b 	.word	0x0800217b
 8002148:	0800217b 	.word	0x0800217b
 800214c:	0800217b 	.word	0x0800217b
 8002150:	08002173 	.word	0x08002173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002154:	f7ff fede 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8002158:	61b8      	str	r0, [r7, #24]
        break;
 800215a:	e013      	b.n	8002184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800215c:	f7ff fefc 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002160:	61b8      	str	r0, [r7, #24]
        break;
 8002162:	e00f      	b.n	8002184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002164:	4b4e      	ldr	r3, [pc, #312]	; (80022a0 <UART_SetConfig+0x268>)
 8002166:	61bb      	str	r3, [r7, #24]
        break;
 8002168:	e00c      	b.n	8002184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800216a:	f7ff fe5d 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 800216e:	61b8      	str	r0, [r7, #24]
        break;
 8002170:	e008      	b.n	8002184 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	61bb      	str	r3, [r7, #24]
        break;
 8002178:	e004      	b.n	8002184 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	77bb      	strb	r3, [r7, #30]
        break;
 8002182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d074      	beq.n	8002274 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	005a      	lsls	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	441a      	add	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d916      	bls.n	80021d4 <UART_SetConfig+0x19c>
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d212      	bcs.n	80021d4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f023 030f 	bic.w	r3, r3, #15
 80021b6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	89fa      	ldrh	r2, [r7, #14]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	e04f      	b.n	8002274 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	77bb      	strb	r3, [r7, #30]
 80021d8:	e04c      	b.n	8002274 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d828      	bhi.n	8002232 <UART_SetConfig+0x1fa>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <UART_SetConfig+0x1b0>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	0800220d 	.word	0x0800220d
 80021ec:	08002215 	.word	0x08002215
 80021f0:	0800221d 	.word	0x0800221d
 80021f4:	08002233 	.word	0x08002233
 80021f8:	08002223 	.word	0x08002223
 80021fc:	08002233 	.word	0x08002233
 8002200:	08002233 	.word	0x08002233
 8002204:	08002233 	.word	0x08002233
 8002208:	0800222b 	.word	0x0800222b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800220c:	f7ff fe82 	bl	8001f14 <HAL_RCC_GetPCLK1Freq>
 8002210:	61b8      	str	r0, [r7, #24]
        break;
 8002212:	e013      	b.n	800223c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002214:	f7ff fea0 	bl	8001f58 <HAL_RCC_GetPCLK2Freq>
 8002218:	61b8      	str	r0, [r7, #24]
        break;
 800221a:	e00f      	b.n	800223c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800221c:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <UART_SetConfig+0x268>)
 800221e:	61bb      	str	r3, [r7, #24]
        break;
 8002220:	e00c      	b.n	800223c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002222:	f7ff fe01 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8002226:	61b8      	str	r0, [r7, #24]
        break;
 8002228:	e008      	b.n	800223c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800222a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800222e:	61bb      	str	r3, [r7, #24]
        break;
 8002230:	e004      	b.n	800223c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	77bb      	strb	r3, [r7, #30]
        break;
 800223a:	bf00      	nop
    }

    if (pclk != 0U)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d018      	beq.n	8002274 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	085a      	lsrs	r2, r3, #1
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	441a      	add	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	2b0f      	cmp	r3, #15
 800225a:	d909      	bls.n	8002270 <UART_SetConfig+0x238>
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d205      	bcs.n	8002270 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	e001      	b.n	8002274 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002280:	7fbb      	ldrb	r3, [r7, #30]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3720      	adds	r7, #32
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	efff69f3 	.word	0xefff69f3
 8002290:	40013800 	.word	0x40013800
 8002294:	40021000 	.word	0x40021000
 8002298:	40004400 	.word	0x40004400
 800229c:	40004800 	.word	0x40004800
 80022a0:	007a1200 	.word	0x007a1200

080022a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	430a      	orrs	r2, r1
 80022cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01a      	beq.n	80023ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023a2:	d10a      	bne.n	80023ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	430a      	orrs	r2, r1
 80023b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	605a      	str	r2, [r3, #4]
  }
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b098      	sub	sp, #96	; 0x60
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023f8:	f7fe f8ba 	bl	8000570 <HAL_GetTick>
 80023fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d12e      	bne.n	800246a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800240c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002410:	9300      	str	r3, [sp, #0]
 8002412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002414:	2200      	movs	r2, #0
 8002416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f88c 	bl	8002538 <UART_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d021      	beq.n	800246a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	e853 3f00 	ldrex	r3, [r3]
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800243a:	653b      	str	r3, [r7, #80]	; 0x50
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002444:	647b      	str	r3, [r7, #68]	; 0x44
 8002446:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002448:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800244a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800244c:	e841 2300 	strex	r3, r2, [r1]
 8002450:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e6      	bne.n	8002426 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2220      	movs	r2, #32
 800245c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e062      	b.n	8002530 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d149      	bne.n	800250c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002480:	2200      	movs	r2, #0
 8002482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f856 	bl	8002538 <UART_WaitOnFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d03c      	beq.n	800250c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	623b      	str	r3, [r7, #32]
   return(result);
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30
 80024b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b8:	e841 2300 	strex	r3, r2, [r1]
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e6      	bne.n	8002492 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3308      	adds	r3, #8
 80024ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	64bb      	str	r3, [r7, #72]	; 0x48
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3308      	adds	r3, #8
 80024e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024e4:	61fa      	str	r2, [r7, #28]
 80024e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	69b9      	ldr	r1, [r7, #24]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	617b      	str	r3, [r7, #20]
   return(result);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2220      	movs	r2, #32
 80024fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e011      	b.n	8002530 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3758      	adds	r7, #88	; 0x58
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002548:	e049      	b.n	80025de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d045      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7fe f80d 	bl	8000570 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <UART_WaitOnFlagUntilTimeout+0x30>
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e048      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d031      	beq.n	80025de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d110      	bne.n	80025aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2208      	movs	r2, #8
 800258e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f838 	bl	8002606 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2208      	movs	r2, #8
 800259a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e029      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025b8:	d111      	bne.n	80025de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 f81e 	bl	8002606 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e00f      	b.n	80025fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69da      	ldr	r2, [r3, #28]
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4013      	ands	r3, r2
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	bf0c      	ite	eq
 80025ee:	2301      	moveq	r3, #1
 80025f0:	2300      	movne	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d0a6      	beq.n	800254a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002606:	b480      	push	{r7}
 8002608:	b095      	sub	sp, #84	; 0x54
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
 800262e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002632:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e6      	bne.n	800260e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	3308      	adds	r3, #8
 8002646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	3308      	adds	r3, #8
 800265e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002660:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	2b01      	cmp	r3, #1
 800267a:	d118      	bne.n	80026ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	e853 3f00 	ldrex	r3, [r3]
 8002688:	60bb      	str	r3, [r7, #8]
   return(result);
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f023 0310 	bic.w	r3, r3, #16
 8002690:	647b      	str	r3, [r7, #68]	; 0x44
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	e841 2300 	strex	r3, r2, [r1]
 80026a6:	613b      	str	r3, [r7, #16]
   return(result);
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1e6      	bne.n	800267c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80026c2:	bf00      	nop
 80026c4:	3754      	adds	r7, #84	; 0x54
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <__libc_init_array>:
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	4d0d      	ldr	r5, [pc, #52]	; (8002708 <__libc_init_array+0x38>)
 80026d4:	4c0d      	ldr	r4, [pc, #52]	; (800270c <__libc_init_array+0x3c>)
 80026d6:	1b64      	subs	r4, r4, r5
 80026d8:	10a4      	asrs	r4, r4, #2
 80026da:	2600      	movs	r6, #0
 80026dc:	42a6      	cmp	r6, r4
 80026de:	d109      	bne.n	80026f4 <__libc_init_array+0x24>
 80026e0:	4d0b      	ldr	r5, [pc, #44]	; (8002710 <__libc_init_array+0x40>)
 80026e2:	4c0c      	ldr	r4, [pc, #48]	; (8002714 <__libc_init_array+0x44>)
 80026e4:	f000 f820 	bl	8002728 <_init>
 80026e8:	1b64      	subs	r4, r4, r5
 80026ea:	10a4      	asrs	r4, r4, #2
 80026ec:	2600      	movs	r6, #0
 80026ee:	42a6      	cmp	r6, r4
 80026f0:	d105      	bne.n	80026fe <__libc_init_array+0x2e>
 80026f2:	bd70      	pop	{r4, r5, r6, pc}
 80026f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f8:	4798      	blx	r3
 80026fa:	3601      	adds	r6, #1
 80026fc:	e7ee      	b.n	80026dc <__libc_init_array+0xc>
 80026fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002702:	4798      	blx	r3
 8002704:	3601      	adds	r6, #1
 8002706:	e7f2      	b.n	80026ee <__libc_init_array+0x1e>
 8002708:	08002778 	.word	0x08002778
 800270c:	08002778 	.word	0x08002778
 8002710:	08002778 	.word	0x08002778
 8002714:	0800277c 	.word	0x0800277c

08002718 <memset>:
 8002718:	4402      	add	r2, r0
 800271a:	4603      	mov	r3, r0
 800271c:	4293      	cmp	r3, r2
 800271e:	d100      	bne.n	8002722 <memset+0xa>
 8002720:	4770      	bx	lr
 8002722:	f803 1b01 	strb.w	r1, [r3], #1
 8002726:	e7f9      	b.n	800271c <memset+0x4>

08002728 <_init>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr

08002734 <_fini>:
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	bf00      	nop
 8002738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800273a:	bc08      	pop	{r3}
 800273c:	469e      	mov	lr, r3
 800273e:	4770      	bx	lr
